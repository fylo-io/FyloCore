name: FyloCore CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: fylocore

jobs:
  # Test and Lint
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: core-server/package-lock.json

    - name: Install dependencies
      run: |
        cd core-server
        npm ci

    - name: Run linting
      run: |
        cd core-server
        npm run lint

    - name: Run tests
      run: |
        cd core-server
        npm run test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: core-server/coverage/lcov.info
        flags: core-server
        name: core-server-coverage

  # Build and Push Docker Images
  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for core-server
      id: meta-server
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/core-server
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push core-server image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deploy/docker/Dockerfile
        push: true
        tags: ${{ steps.meta-server.outputs.tags }}
        labels: ${{ steps.meta-server.outputs.labels }}

    - name: Extract metadata for core-ui
      id: meta-ui
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/core-ui
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push core-ui image
      uses: docker/build-push-action@v5
      with:
        context: core-ui
        file: deploy/docker/Dockerfile.ui
        push: true
        tags: ${{ steps.meta-ui.outputs.tags }}
        labels: ${{ steps.meta-ui.outputs.labels }}

  # Security Scanning
  security:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/core-server:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Deploy to staging
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        cd deploy/kubernetes
        kustomize edit set image fylocore/core-server=${{ env.REGISTRY }}/${{ github.repository }}/core-server:${{ github.sha }}
        kustomize edit set image fylocore/core-ui=${{ env.REGISTRY }}/${{ github.repository }}/core-ui:${{ github.sha }}
        
        kubectl apply -k .
        kubectl rollout status deployment/core-server -n fylocore
        kubectl rollout status deployment/core-ui -n fylocore

  # Deploy to Production
  deploy-production:
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Deploy to production
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        cd deploy/kubernetes
        kustomize edit set image fylocore/core-server=${{ env.REGISTRY }}/${{ github.repository }}/core-server:${{ github.sha }}
        kustomize edit set image fylocore/core-ui=${{ env.REGISTRY }}/${{ github.repository }}/core-ui:${{ github.sha }}
        
        kubectl apply -k .
        kubectl rollout status deployment/core-server -n fylocore
        kubectl rollout status deployment/core-ui -n fylocore

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
